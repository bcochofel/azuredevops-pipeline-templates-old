# Dependencies:
# - required parameters
#   - environment (environment to use), type "string"
#   - module (module name), type "string"
#   - debug (whether or not to debug pipeline), type "boolean"
#   - variableGroupName (variable group with providers credentials), type "string"
#   - workingDirectory (directory with the terraform files), type "string"
#   - backendKey (terraform backend key for the tfstate file), type "string"
#   - installTerraform (whether or not to install terraform binary), type "boolean"
#   - terraformVersion (terraform version to install), type "string"
#   - installConftest (whether or not to install conftest binary), type "boolean"
#   - conftestVersion (conftest version to install), type "string"
#   - conftestRepository (conftest repository to checkout), type "string"
#   - conftestTerraformRulesFolder (rego files for terraform), type "string"
#   - installTFLint (whether or not to install TFLint binary), type "boolean"
#   - tflintVersion (TFLint version to install), type "string"
#   - tflintRulesetAzurermVersion (tflint-ruleset-azurerm version to install), type "string"
#   - preInitSteps (list of steps to execute before init cmd), type "stepList"
#   - postInitSteps (list of steps to execute after init cmd), type "stepList"
#   - prePlanSteps (list of steps to execute before plan cmd), type "stepList"
#   - postPlanSteps (list of steps to execute after plan cmd), type "stepList"
#   - planEnvVars (object with environment variables mapping), type "object"
#   - planExtraArgs (extra arguments for the plan command), type "string"
#   - terraformPlanFile (terraform plan output filename), type "string"
#   - terraformJsonPlanFile (terraform plan JSON output filename), type "string"
#   - conftestJsonOutput (conftest JSON output filename), type "string"
# - variable group passed with parameter variableGroupName with the following variables:
#   - ARM_CLIENT_ID
#   - ARM_SUBSCRIPTION_ID
#   - ARM_TENANT_ID
#   - ARM_OBJECT_ID
#   - AZDO_ORG_SERVICE_URL
#   - TF_IN_AUTOMATION
#   - TF_BACKEND_RESOURCE_GROUP_NAME
#   - TF_BACKEND_STORAGE_ACCOUNT_NAME
#   - TF_BACKEND_CONTAINER_NAME
# - variable group named ${{ parameters.variableGroupName }}-secrets with the following variables:
#   - ARM_CLIENT_SECRET
#   - AZDO_PERSONAL_ACCESS_TOKEN
#
# PR comments, more info here:
# https://www.natmarchand.fr/terraform-plan-as-pr-comment-in-azure-devops/
# https://stackoverflow.com/questions/60048492/how-to-create-a-comment-in-azure-devops-pr-in-case-of-build-failure
# https://docs.microsoft.com/en-us/dotnet/api/microsoft.teamfoundation.sourcecontrol.webapi.commenttype?view=azure-devops-dotnet
# https://docs.microsoft.com/en-us/dotnet/api/microsoft.teamfoundation.sourcecontrol.webapi.commentthreadstatus?view=azure-devops-dotnet
# https://github.com/microsoft/azure-devops-node-api/issues/300
#
# Other docs:
# https://github.com/terraform-linters/tflint-ruleset-azurerm/releases/download/v0.5.0/tflint-ruleset-azurerm_linux_amd64.zip

parameters:
  - name: environment
    type: string

  - name: module
    type: string

  - name: debug
    type: boolean

  - name: variableGroupName
    type: string

  - name: workingDirectory
    type: string

  - name: backendKey
    type: string

  - name: installTerraform
    type: boolean

  - name: terraformVersion
    type: string

  - name: installConftest
    type: boolean

  - name: conftestVersion
    type: string

  - name: conftestRepository
    type: string

  - name: conftestTerraformRulesFolder
    type: string

  - name: installTFLint
    type: boolean

  - name: tflintVersion
    type: string

  - name: tflintRulesetAzurermVersion
    type: string

  - name: preInitSteps
    type: stepList

  - name: postInitSteps
    type: stepList

  - name: prePlanSteps
    type: stepList

  - name: postPlanSteps
    type: stepList

  - name: planEnvVars
    type: object

  - name: planExtraArgs
    type: string

  - name: terraformPlanFile
    type: string

  - name: terraformJsonPlanFile
    type: string

  - name: conftestJsonOutput
    type: string

stages :
  - stage: Validate
    variables:
      - group: ${{ parameters.variableGroupName }}
      - group: ${{ parameters.variableGroupName }}-secrets
      - name: installTerraformBinary
        value: ${{ parameters.installTerraform }}
      - name: installConftestBinary
        value: ${{ parameters.installConftest }}
      - name: installTFLintBinary
        value: ${{ parameters.installTFLint }}
      - name: TF_STATE_KEY
        value: ${{ parameters.backendKey }}
      - name: System.Debug
        value: ${{ parameters.debug }}
    jobs:
      - job: Validate
        continueOnError: false
        steps:
          - checkout: self
            persistCredentials: true
          - checkout: ${{ parameters.conftestRepository }}

          - task: Bash@3
            displayName: "[terraform install]"
            condition: and(succeeded(), eq(variables['installTerraformBinary'], true))
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                set -eu
                curl -sL https://releases.hashicorp.com/terraform/${TF_VER}/terraform_${TF_VER}_linux_amd64.zip --output terraform.zip
                unzip terraform.zip
                echo "##vso[task.prependpath]$(Build.SourcesDirectory)"
            env:
              TF_VER: ${{ parameters.terraformVersion }}

          - task: Bash@3
            displayName: "[terraform version]"
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                set -eu
                terraform version

          - task: Bash@3
            displayName: "[conftest install]"
            condition: and(succeeded(), eq(variables['installConftestBinary'], true))
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                set -eu
                curl -sL https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VER}/conftest_${CONFTEST_VER}_Linux_x86_64.tar.gz --output conftest.tgz
                tar zxf conftest.tgz
                echo "##vso[task.prependpath]$(Build.SourcesDirectory)"
            env:
              CONFTEST_VER: ${{ parameters.conftestVersion }}

          - task: Bash@3
            displayName: "[conftest version]"
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                set -eu
                conftest --version

          - task: Bash@3
            displayName: "[tflint install]"
            condition: and(succeeded(), eq(variables['installTFLintBinary'], true))
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                set -eu
                curl -sL https://github.com/terraform-linters/tflint/releases/download/v${TFLINT_VER}/tflint_linux_amd64.zip --output tflint.zip
                unzip tflint.zip
                curl -sL https://github.com/terraform-linters/tflint-ruleset-azurerm/releases/download/v${TFLINT_AZURERM_VER}/tflint-ruleset-azurerm_linux_amd64.zip --output tflint-azurerm.zip
                unzip tflint-azurerm.zip
                cat << EOF > tflint.hcl
                plugin "azurerm" {
                  enabled = true
                }
                EOF
                echo "##vso[task.setvariable variable=tflint_plugin_dir;]$(Build.SourcesDirectory)"
                echo "##vso[task.prependpath]$(Build.SourcesDirectory)"
            env:
              TFLINT_VER: ${{ parameters.tflintVersion }}
              TFLINT_AZURERM_VER: ${{ parameters.tflintRulesetAzurermVersion }}

          - task: Bash@3
            displayName: "[tflint version]"
            inputs:
              targetType: 'inline'
              failOnStderr: true
              script: |
                set -eu
                tflint --config=$(Build.SourcesDirectory)/tflint.hcl --version

          - ${{ each step in parameters.preInitSteps }}:
              - ${{ step }}

          - task: Bash@3
            displayName: "[terraform init]"
            inputs:
              targetType: 'inline'
              failOnStderr: true
              workingDirectory: ${{ parameters.workingDirectory }}
              script: |
                set -eu
                terraform init \
                  -backend-config=resource_group_name=${TF_BACKEND_RESOURCE_GROUP_NAME} \
                  -backend-config=storage_account_name=${TF_BACKEND_STORAGE_ACCOUNT_NAME} \
                  -backend-config=container_name=${TF_BACKEND_CONTAINER_NAME} \
                  -backend-config=key=${TF_STATE_KEY}
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)

          - ${{ each step in parameters.postInitSteps }}:
              - ${{ step }}

          - task: Bash@3
            displayName: "[terraform validate]"
            inputs:
              targetType: 'inline'
              failOnStderr: true
              workingDirectory: ${{ parameters.workingDirectory }}
              script: |
                set -eu
                terraform validate

          - task: Bash@3
            displayName: "[tflint validate]"
            inputs:
              targetType: 'inline'
              workingDirectory: ${{ parameters.workingDirectory }}
              script: |
                set -eu
                tflint --config=$(Build.SourcesDirectory)/tflint.hcl --module .

          - ${{ each step in parameters.prePlanSteps }}:
              - ${{ step }}

          - task: Bash@3
            displayName: "[terraform plan]"
            inputs:
              targetType: 'inline'
              failOnStderr: true
              workingDirectory: ${{ parameters.workingDirectory }}
              script: |
                set -eu
                terraform plan -input=false -out=${{ parameters.terraformPlanFile }} ${{ parameters.planExtraArgs }}
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)
              # add custom environment variables for plan
              ${{ each envVar in parameters.planEnvVars }}:
                ${{ envVar.key }}: ${{ envVar.Value }}

          - ${{ each step in parameters.postPlanSteps }}:
              - ${{ step }}

          - task: Bash@3
            displayName: "[terraform show]"
            inputs:
              targetType: 'inline'
              failOnStderr: true
              workingDirectory: ${{ parameters.workingDirectory }}
              script: |
                set -eu
                terraform show -no-color -json ${{ parameters.terraformPlanFile }} > ${{ parameters.terraformJsonPlanFile }}
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)

          - task: Bash@3
            displayName: "[conftest compliance]"
            inputs:
              targetType: 'inline'
              script: |
                set -eu
                #env
                #ls -alR
                conftest test ${TF_JSON_PATH} -p ${TF_RULES_PATH} -o json > ${{ parameters.conftestJsonOutput }}
            env:
              TF_JSON_PATH: ${{ parameters.terraformJsonPlanFile }}
              TF_RULES_PATH: ${{ parameters.conftestTerraformRulesFolder }}
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - task: PowerShell@2
            displayName: "[pr comments from terraform compliance]"
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "JSON plan path: (${env:TF_RULES_PATH})"
                $json = Get-Content -Path ${env:TF_RULES_PATH} | ConvertFrom-Json

                $statusCode = "closed"
                $content = "**Conftest compliance summary:**`r`n"
                $commentType = "text"

                $warnings = $json.warnings
                $failures = $json.failures
                if ((-not $warnings) -and (-not $failures)) {
                  $content += "Compliance check ok ! :thumbsup:`r`n`r`nThis comment thread is closed !"
                } else {
                  foreach ($warning in $warnings) {
                    $msg = $($warning.msg).Replace('"','#')
                    $content += ":exclamation: $msg `r`n"
                  }
                  foreach ($failure in $failures) {
                    $msg = $($failure.msg).Replace('"','#')
                    $content += ":x: $msg `r`n"
                  }
                  $statusCode = "active"
                  $commentType = "codeChange"
                  $content += "`r`nThis comment thread is active, don't forget to mark it as resolved or won't fix !"
                }

                $linkUrl = [System.Uri]::EscapeUriString("${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}")
                $content += "`r`nSee [Pipeline ${env:BUILD_BUILDNUMBER} logs]($linkUrl)"

                #Build the JSON body up
                $body = @"
                {
                  "comments": [
                    {
                      "parentCommentId": 0,
                      "content": "$content",
                      "commentType": "$commentType"
                    }
                  ],
                  "status": "$statusCode"
                }
                "@

                $url = "${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECT}/_apis/git/repositories/${env:BUILD_REPOSITORY_ID}/pullrequests/${env:SYSTEM_PULLREQUEST_PULLREQUESTID}/threads?api-version=5.1"

                # send POST to the API
                Invoke-RestMethod -Method "POST" -Uri $url -Body $body -ContentType "application/json" -Headers @{ Authorization = "Bearer ${env:SYSTEM_ACCESSTOKEN}" }
            env:
              TF_RULES_PATH: ${{ parameters.conftestJsonOutput }}
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)

          - task: PowerShell@2
            displayName: "[pr comments from terraform plan]"
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "JSON plan path: (${env:TF_JSON_PATH})"
                $json = Get-Content -Path ${env:TF_JSON_PATH} | ConvertFrom-Json
                $changes = $json.resource_changes | Where-Object { ($_.change.actions[0] -ne 'no-op') -and ($_.change.actions[0] -ne 'read') }

                function ToIcon($action) {
                  switch ($action) {
                    "create" { ":sparkles:" }
                    "update" { ":pencil2:" }
                    "delete" { ":bomb:" }
                    Default { return $action }
                  }
                }

                if (-not $changes) {
                  $content = "**Terraform Plan changes summary :**`r`nNo Changes ! :thumbsup:`r`n`r`nThis comment thread is closed as there are no changes !"
                  $commentType = "text"
                  $statusCode = "closed"
                } else {
                  $content = "**Terraform Plan changes summary :**`r`n"
                  $commentType = "codeChange"
                  $statusCode = "active"
                  foreach ($change in $changes) {
                    $actions = $change.change.actions | ForEach-Object { ToIcon($_) }
                    $nameBefore = $change.change.before.name
                    $nameAfter = $change.change.after.name

                    if($nameBefore -and $nameAfter -and ($nameBefore -ne $nameAfter)) {
                      $resource = "$nameBefore :arrow_right: $nameAfter"
                    } elseif ($nameBefore -and $nameAfter) {
                      $resource = $nameBefore
                    } elseif ($nameBefore -and (-not $nameAfter)) {
                      $resource = $nameBefore
                    } elseif ($nameAfter -and (-not $nameBefore)) {
                      $resource = $nameAfter
                    }

                    $content += "$([System.String]::Join(" ", $actions)) $resource ($($change.type))`r`n"
                  }
                  $content += "`r`nThis comment thread is active, don't forget to mark it as resolved or won't fix !"
                }

                $linkUrl = [System.Uri]::EscapeUriString("${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECT}/_build/results?buildId=${env:BUILD_BUILDID}&view=logs&j=${env:SYSTEM_JOBID}")
                $content += "`r`nSee [Pipeline ${env:BUILD_BUILDNUMBER} logs]($linkUrl)"

                #Build the JSON body up
                $body = @"
                {
                  "comments": [
                    {
                      "parentCommentId": 0,
                      "content": "$content",
                      "commentType": "$commentType"
                    }
                  ],
                  "status": "$statusCode"
                }
                "@

                $url = "${env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI}${env:SYSTEM_TEAMPROJECT}/_apis/git/repositories/${env:BUILD_REPOSITORY_ID}/pullrequests/${env:SYSTEM_PULLREQUEST_PULLREQUESTID}/threads?api-version=5.1"

                # send POST to the API
                Invoke-RestMethod -Method "POST" -Uri $url -Body $body -ContentType "application/json" -Headers @{ Authorization = "Bearer ${env:SYSTEM_ACCESSTOKEN}" }
            env:
              TF_JSON_PATH: ${{ parameters.terraformJsonPlanFile }}
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
